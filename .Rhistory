network_test <- network_summary(data = data_test,
FishID=data_test$FishID,
ReceiverID=data_test$ReceiverID,
lat = data_test$lat,
long = data_test$long)
network_test$receiver.locations
network_test$individual.moves
network_test$plot.data
data_test <- data_det_raw %>%
mutate(FishID = as.numeric(animal_id),
ReceiverID=transmitter_id,
lat=deploy_lat,
long=deploy_long)
View(data_test)
data_test <- data_det_raw %>%
mutate(FishID = as.numeric(as.factor(animal_id)),
ReceiverID=transmitter_id,
lat=deploy_lat,
long=deploy_long)
network_test$receiver.locations
network_test$individual.moves
network_test$plot.data
data_test <- data_det_raw %>%
mutate(FishID = as.numeric(as.factor(animal_id)),
ReceiverID=transmitter_id,
lat=deploy_lat,
long=deploy_long)
data_test$FishID
network_test <- network_summary(data = data_test,
FishID=data_test$FishID,
ReceiverID=data_test$ReceiverID,
lat = data_test$lat,
long = data_test$long)
network_test$receiver.locations
network_test$individual.moves
network_test$plot.data
network_plot <- network_plot(network_test)
network_plot <- network_plot(network_test$plot.data)
network_test$plot.data
network_test$plot.data
network_plot(network_test$plot.data)
network_plot(data = network_test$plot.data)
#load package
devtools::load_all()
#working script
library(tidyverse)
library(data.table)
data_test <- data_det_raw %>%
mutate(FishID = as.numeric(as.factor(animal_id)),
ReceiverID=transmitter_id,
lat=deploy_lat,
long=deploy_long)
network_test <- network_summary(data = data_test,
FishID=data_test$FishID,
ReceiverID=data_test$ReceiverID,
lat = data_test$lat,
long = data_test$long)
network_test$receiver.locations
network_test$individual.moves
network_test$plot.data
plot <- network_plot(data = network_test)
network_test
subset(network_test$plot.data, network_test$plot.data$Freq>Min.traffic-1)
plot <- network_plot(data = network_test,
Min.traffic=0, #specify if you want ignore any lines below traffic threshold
#shapefile=SL_shapefile, ylim = c(44.48, 44.59), #specify shapefile, and potential domain limits
#colour.gradient.low="grey", colour.gradient.high="purple", #pick your own colour scale
line.min=1, line.max=3, #pick your own line weights
#receiver.shape=22, receiver.size=6, receiver.stroke=4, #customize the look of your nodes
plot.title="Network plot", #speficy optional figure title (useful if looping across fish)
#labels=TRUE, label.size=1.8, label.transparency=0.5, label.nudge=0.00009, #add labels, and specify details
)
plot <- network_plot(data = network_test,
Min.traffic=3, #specify if you want ignore any lines below traffic threshold
#shapefile=SL_shapefile, ylim = c(44.48, 44.59), #specify shapefile, and potential domain limits
#colour.gradient.low="grey", colour.gradient.high="purple", #pick your own colour scale
line.min=1, line.max=3, #pick your own line weights
#receiver.shape=22, receiver.size=6, receiver.stroke=4, #customize the look of your nodes
plot.title="Network plot", #speficy optional figure title (useful if looping across fish)
#labels=TRUE, label.size=1.8, label.transparency=0.5, label.nudge=0.00009, #add labels, and specify details
)
network_test$plot.data
network_plot()
network_plot
str(network_test)
shapefile <- read_sf("data-raw//files=raw/HH_shapefile/HH_Water_Poly.shp") #st_read()
library('sf')
shapefile <- read_sf("data-raw//files=raw/HH_shapefile/HH_Water_Poly.shp") #st_read()
### Process misc data
#----------------------------#
###Project shapefile
shapefile <- st_transform(shapefile, "WGS84") #Also try "EPSG:4326"; 'EPSG:32724'
shapefile <- read_sf("data-raw/files-raw/HH_shapefile/HH_Water_Poly.shp") #st_read()
### Process misc data
#----------------------------#
###Project shapefile
shapefile <- st_transform(shapefile, "WGS84") #Also try "EPSG:4326"; 'EPSG:32724'
library('sf')
shapefile <- read_sf("data-raw/files-raw/HH_shapefile/HH_Water_Poly.shp") #st_read()
###Project shapefile
HH_shapefile_WGS84 <- st_transform(shapefile, "WGS84") #Also try "EPSG:4326"; 'EPSG:32724'
usethis::use_data(HH_shapefile_WGS84, overwrite = TRUE)
#load package
devtools::load_all()
#working script
library(tidyverse)
library(data.table)
data_test <- data_det_raw %>%
mutate(FishID = as.numeric(as.factor(animal_id)),
ReceiverID=transmitter_id,
lat=deploy_lat,
long=deploy_long)
network_test <- network_summary(data = data_test,
FishID=data_test$FishID,
ReceiverID=data_test$ReceiverID,
lat = data_test$lat,
long = data_test$long)
network_test$receiver.locations
network_test$individual.moves
network_test$plot.data
plot <- network_plot(data = network_test,
Min.traffic=3, #specify if you want ignore any lines below traffic threshold
shapefile=HH_shapefile_WGS84,  #specify shapefile, and potential domain limits
#colour.gradient.low="grey", colour.gradient.high="purple", #pick your own colour scale
line.min=1, line.max=3, #pick your own line weights
#receiver.shape=22, receiver.size=6, receiver.stroke=4, #customize the look of your nodes
plot.title="Network plot", #speficy optional figure title (useful if looping across fish)
#labels=TRUE, label.size=1.8, label.transparency=0.5, label.nudge=0.00009, #add labels, and specify details
)
HH_shapefile_WGS84
a <- HH_shapefile_WGS84
View(a)
View(a[[18]][[1]])
a[[18]][[1]][[1]][[1]]
a[[18]][[1]]
#-------------------------------------------------------------#
### Function to summarize network data for analysis and plotting
#-------------------------------------------------------------#
network_plot <- function(data, #specify previously created network matrix
Min.traffic=1, #specify if you want ignore any lines below traffic threshold
shapefile=NA, xlim=NULL, ylim=NULL, #specify shapefile, and potential domain limits
#colour.gradient.low="blue", colour.gradient.high="red", #pick your own colour scale
line.min=0.5, line.max=2.5, #pick your own line weights
#receiver.shape=21, receiver.size=4, receiver.stroke=2, #customize the look of your nodes
plot.title=NULL, y.axis="latitude", x.axis="longitude", #speficy optional figure title (useful if looping across fish)
labels=FALSE, label.size=2, label.transparency=0.6, label.nudge=0, #add labels, and specify details
...){ #Start function
plot.data<-subset(data$plot.data, data$plot.data$Freq>Min.traffic-1) #Filter out network lines/edges below specified traffic
#Plot network
a<- ggplot()+ #Use ggplot base
#geom_polygon(data = shapefile, aes(x = long, y = lat, group = group), colour = "dark grey", fill = NA)+ #plot provided shapefile
geom_sf(data=shapefile, colour = "black", fill=NA, inherit.aes = FALSE)+
geom_segment(data=plot.data, aes(x=from.x, xend = to.x, y=from.y, yend = to.y, size=Freq), colour='burlywood4', alpha=0.6) +  #Plot movement lines
scale_size("line", range = c(line.min, line.max))+  #Set line-size range
geom_point(data=data$receiver.locations, aes(x=long, y=lat, fill=Freq), size=3, shape=21, stroke=1.3)+  #Add reciever circles, colour by matrix frequency
scale_fill_viridis_c()+
coord_fixed(xlim=xlim, ylim=ylim)+  #Lock aspect ratio. Specify limits if shapefile is too big
ylab(y.axis)+ #y axis label
xlab(x.axis)+ # x axis label
ggtitle(as.character(plot.title))+ #add optional title
theme_classic() #simple plot theme
#If else loop to look for optional labels.
if(isFALSE(labels)){c <- NULL} else{ #Ignore the lines below if labels are not wanted
c<-geom_label(data=data$receiver.locations, #add labels for receiver names
aes(x=long, y=lat, label=(data$receiver.locations$ReceiverNames)), #add labels for receiver names
hjust = 0, size=label.size, alpha=label.transparency, nudge_x=label.nudge) #add labels for receiver names
} #end if else loop
###
print(a + c) #print plot with optional shapefile and labels
###
}
plot <- network_plot(data = network_test,
Min.traffic=3, #specify if you want ignore any lines below traffic threshold
shapefile=HH_shapefile_WGS84,  #specify shapefile, and potential domain limits
#colour.gradient.low="grey", colour.gradient.high="purple", #pick your own colour scale
line.min=1, line.max=3, #pick your own line weights
#receiver.shape=22, receiver.size=6, receiver.stroke=4, #customize the look of your nodes
plot.title="Network plot", #speficy optional figure title (useful if looping across fish)
#labels=TRUE, label.size=1.8, label.transparency=0.5, label.nudge=0.00009, #add labels, and specify details
)
#-------------------------------------------------------------#
### Function to summarize network data for analysis and plotting
#-------------------------------------------------------------#
network_plot <- function(data, #specify previously created network matrix
Min.traffic=1, #specify if you want ignore any lines below traffic threshold
shapefile=NA, xlim=NULL, ylim=NULL, #specify shapefile, and potential domain limits
#colour.gradient.low="blue", colour.gradient.high="red", #pick your own colour scale
line.min=0.5, line.max=2.5, #pick your own line weights
#receiver.shape=21, receiver.size=4, receiver.stroke=2, #customize the look of your nodes
plot.title=NULL, y.axis="latitude", x.axis="longitude", #speficy optional figure title (useful if looping across fish)
labels=FALSE, label.size=2, label.transparency=0.6, label.nudge=0, #add labels, and specify details
...){ #Start function
plot.data<-subset(data$plot.data, data$plot.data$Freq>Min.traffic-1) #Filter out network lines/edges below specified traffic
#Plot network
a<- ggplot()+ #Use ggplot base
#geom_polygon(data = shapefile, aes(x = long, y = lat, group = group), colour = "dark grey", fill = NA)+ #plot provided shapefile
geom_sf(data=shapefile, colour = "black", fill=NA, inherit.aes = FALSE)+
geom_segment(data=plot.data, aes(x=from.x, xend = to.x, y=from.y, yend = to.y, size=Freq), colour='burlywood4', alpha=0.6) +  #Plot movement lines
scale_size("line", range = c(line.min, line.max))+  #Set line-size range
geom_point(data=data$receiver.locations, aes(x=long, y=lat, fill=Freq), size=3, shape=21, stroke=1.3)+  #Add reciever circles, colour by matrix frequency
scale_fill_viridis_c()+
#coord_fixed(xlim=xlim, ylim=ylim)+  #Lock aspect ratio. Specify limits if shapefile is too big
ylab(y.axis)+ #y axis label
xlab(x.axis)+ # x axis label
ggtitle(as.character(plot.title))+ #add optional title
theme_classic() #simple plot theme
#If else loop to look for optional labels.
if(isFALSE(labels)){c <- NULL} else{ #Ignore the lines below if labels are not wanted
c<-geom_label(data=data$receiver.locations, #add labels for receiver names
aes(x=long, y=lat, label=(data$receiver.locations$ReceiverNames)), #add labels for receiver names
hjust = 0, size=label.size, alpha=label.transparency, nudge_x=label.nudge) #add labels for receiver names
} #end if else loop
###
print(a + c) #print plot with optional shapefile and labels
###
}
plot <- network_plot(data = network_test,
Min.traffic=3, #specify if you want ignore any lines below traffic threshold
shapefile=HH_shapefile_WGS84,  #specify shapefile, and potential domain limits
#colour.gradient.low="grey", colour.gradient.high="purple", #pick your own colour scale
line.min=1, line.max=3, #pick your own line weights
#receiver.shape=22, receiver.size=6, receiver.stroke=4, #customize the look of your nodes
plot.title="Network plot", #speficy optional figure title (useful if looping across fish)
#labels=TRUE, label.size=1.8, label.transparency=0.5, label.nudge=0.00009, #add labels, and specify details
)
plot
network_test$plot.data
plot+
scale_x_continuous(limits=c(min(network_test$plot.data$to.x)-0.01, max(network_test$plot.data$to.x)+0.01))+
scale_y_continuous(limits=c(min(network_test$plot.data$to.y)-0.01, max(network_test$plot.data$to.y)+0.01))
plot+
scale_x_continuous(limits=c(max(network_test$plot.data$to.x)-0.1, max(network_test$plot.data$to.x)+0.01))+
scale_y_continuous(limits=c(min(network_test$plot.data$to.y)-0.01, max(network_test$plot.data$to.y)+0.01))
plot+
scale_x_continuous(limits=c(max(network_test$plot.data$to.x)-0.1, max(network_test$plot.data$to.x)+0.01))+
scale_y_continuous(limits=c(min(network_test$plot.data$to.y)-0.01, max(network_test$plot.data$to.y)+0.01))
plot <- network_plot(data = network_test,
Min.traffic=3, #specify if you want ignore any lines below traffic threshold
shapefile=HH_shapefile_WGS84,  #specify shapefile, and potential domain limits
#colour.gradient.low="grey", colour.gradient.high="purple", #pick your own colour scale
line.min=1, line.max=3, #pick your own line weights
#receiver.shape=22, receiver.size=6, receiver.stroke=4, #customize the look of your nodes
plot.title="Network plot", #speficy optional figure title (useful if looping across fish)
#labels=TRUE, label.size=1.8, label.transparency=0.5, label.nudge=0.00009, #add labels, and specify details
)
data_test <- data_det_raw %>%
mutate(FishID = as.numeric(as.factor(animal_id)),
ReceiverID=transmitter_id,
lat=deploy_lat,
long=deploy_long)
network_test <- network_summary(data = data_test,
FishID=data_test$FishID,
ReceiverID=data_test$ReceiverID,
lat = data_test$lat,
long = data_test$long)
network_test$receiver.locations
network_test$individual.moves
network_test$plot.data
plot <- network_plot(data = network_test,
Min.traffic=3, #specify if you want ignore any lines below traffic threshold
shapefile=HH_shapefile_WGS84,  #specify shapefile, and potential domain limits
#colour.gradient.low="grey", colour.gradient.high="purple", #pick your own colour scale
line.min=1, line.max=3, #pick your own line weights
#receiver.shape=22, receiver.size=6, receiver.stroke=4, #customize the look of your nodes
plot.title="Network plot", #speficy optional figure title (useful if looping across fish)
#labels=TRUE, label.size=1.8, label.transparency=0.5, label.nudge=0.00009, #add labels, and specify details
)
data_test <- data_det_raw %>%
mutate(FishID = as.numeric(as.factor(animal_id)),
ReceiverID=transmitter_id,
lat=deploy_lat,
long=deploy_long)
network_test <- network_summary(data = data_test,
FishID=data_test$FishID,
ReceiverID=data_test$ReceiverID,
lat = data_test$lat,
long = data_test$long)
network_test$receiver.locations
network_test$individual.moves
network_test$plot.data
plot <- network_plot(data = network_test,
Min.traffic=3, #specify if you want ignore any lines below traffic threshold
shapefile=HH_shapefile_WGS84,  #specify shapefile, and potential domain limits
#colour.gradient.low="grey", colour.gradient.high="purple", #pick your own colour scale
line.min=1, line.max=3, #pick your own line weights
#receiver.shape=22, receiver.size=6, receiver.stroke=4, #customize the look of your nodes
plot.title="Network plot", #speficy optional figure title (useful if looping across fish)
#labels=TRUE, label.size=1.8, label.transparency=0.5, label.nudge=0.00009, #add labels, and specify details
)
library(sf)
plot <- network_plot(data = network_test,
Min.traffic=3, #specify if you want ignore any lines below traffic threshold
shapefile=HH_shapefile_WGS84,  #specify shapefile, and potential domain limits
#colour.gradient.low="grey", colour.gradient.high="purple", #pick your own colour scale
line.min=1, line.max=3, #pick your own line weights
#receiver.shape=22, receiver.size=6, receiver.stroke=4, #customize the look of your nodes
plot.title="Network plot", #speficy optional figure title (useful if looping across fish)
#labels=TRUE, label.size=1.8, label.transparency=0.5, label.nudge=0.00009, #add labels, and specify details
)
plot <- network_plot(data = network_test,
Min.traffic=3, #specify if you want ignore any lines below traffic threshold
shapefile=HH_shapefile_WGS84,  #specify shapefile, and potential domain limits
#colour.gradient.low="grey", colour.gradient.high="purple", #pick your own colour scale
line.min=1, line.max=3, #pick your own line weights
#receiver.shape=22, receiver.size=6, receiver.stroke=4, #customize the look of your nodes
plot.title="Network plot", #speficy optional figure title (useful if looping across fish)
#labels=TRUE, label.size=1.8, label.transparency=0.5, label.nudge=0.00009, #add labels, and specify details
)
#-------------------------------------------------------------#
### Function to summarize network data for analysis and plotting
#-------------------------------------------------------------#
network_plot <- function(data, #specify previously created network matrix
Min.traffic=1, #specify if you want ignore any lines below traffic threshold
shapefile=NA, xlim=NULL, ylim=NULL, #specify shapefile, and potential domain limits
#colour.gradient.low="blue", colour.gradient.high="red", #pick your own colour scale
line.min=0.5, line.max=2.5, #pick your own line weights
#receiver.shape=21, receiver.size=4, receiver.stroke=2, #customize the look of your nodes
plot.title=NULL, y.axis="latitude", x.axis="longitude", #speficy optional figure title (useful if looping across fish)
labels=FALSE, label.size=2, label.transparency=0.6, label.nudge=0, #add labels, and specify details
...){ #Start function
plot.data<-subset(data$plot.data, data$plot.data$Freq>Min.traffic-1) #Filter out network lines/edges below specified traffic
#Plot network
a<- ggplot()+ #Use ggplot base
#geom_polygon(data = shapefile, aes(x = long, y = lat, group = group), colour = "dark grey", fill = NA)+ #plot provided shapefile
#geom_sf(data=shapefile, colour = "black", fill=NA, inherit.aes = FALSE)+
geom_segment(data=plot.data, aes(x=from.x, xend = to.x, y=from.y, yend = to.y, size=Freq), colour='burlywood4', alpha=0.6) +  #Plot movement lines
scale_size("line", range = c(line.min, line.max))+  #Set line-size range
geom_point(data=data$receiver.locations, aes(x=long, y=lat, fill=Freq), size=3, shape=21, stroke=1.3)+  #Add reciever circles, colour by matrix frequency
scale_fill_viridis_c()+
#coord_fixed(xlim=xlim, ylim=ylim)+  #Lock aspect ratio. Specify limits if shapefile is too big
ylab(y.axis)+ #y axis label
xlab(x.axis)+ # x axis label
ggtitle(as.character(plot.title))+ #add optional title
theme_classic() #simple plot theme
#If else loop to look for optional labels.
if(isFALSE(labels)){c <- NULL} else{ #Ignore the lines below if labels are not wanted
c<-geom_label(data=data$receiver.locations, #add labels for receiver names
aes(x=long, y=lat, label=(data$receiver.locations$ReceiverNames)), #add labels for receiver names
hjust = 0, size=label.size, alpha=label.transparency, nudge_x=label.nudge) #add labels for receiver names
} #end if else loop
###
print(a + c) #print plot with optional shapefile and labels
###
}
plot <- network_plot(data = network_test,
Min.traffic=3, #specify if you want ignore any lines below traffic threshold
shapefile=HH_shapefile_WGS84,  #specify shapefile, and potential domain limits
#colour.gradient.low="grey", colour.gradient.high="purple", #pick your own colour scale
line.min=1, line.max=3, #pick your own line weights
#receiver.shape=22, receiver.size=6, receiver.stroke=4, #customize the look of your nodes
plot.title="Network plot", #speficy optional figure title (useful if looping across fish)
#labels=TRUE, label.size=1.8, label.transparency=0.5, label.nudge=0.00009, #add labels, and specify details
)
plot+
scale_x_continuous(limits=c(max(network_test$plot.data$to.x)-0.1, max(network_test$plot.data$to.x)+0.01))+
scale_y_continuous(limits=c(min(network_test$plot.data$to.y)-0.01, max(network_test$plot.data$to.y)+0.01))
plot+
scale_x_continuous(limits=c(min(network_test$plot.data$to.x)-0.1, min(network_test$plot.data$to.x)+0.1))+
scale_y_continuous(limits=c(min(network_test$plot.data$to.y)-0.01, max(network_test$plot.data$to.y)+0.01))
plot+
scale_x_continuous(limits=c(min(network_test$plot.data$to.x)-0.1, min(network_test$plot.data$to.x)+0.2))+
scale_y_continuous(limits=c(min(network_test$plot.data$to.y)-0.01, max(network_test$plot.data$to.y)+0.01))
#-------------------------------------------------------------#
### Function to summarize network data for analysis and plotting
#-------------------------------------------------------------#
network_plot <- function(data, #specify previously created network matrix
Min.traffic=1, #specify if you want ignore any lines below traffic threshold
shapefile=NA, xlim=NULL, ylim=NULL, #specify shapefile, and potential domain limits
#colour.gradient.low="blue", colour.gradient.high="red", #pick your own colour scale
line.min=0.5, line.max=2.5, #pick your own line weights
#receiver.shape=21, receiver.size=4, receiver.stroke=2, #customize the look of your nodes
plot.title=NULL, y.axis="latitude", x.axis="longitude", #speficy optional figure title (useful if looping across fish)
labels=FALSE, label.size=2, label.transparency=0.6, label.nudge=0, #add labels, and specify details
...){ #Start function
plot.data<-subset(data$plot.data, data$plot.data$Freq>Min.traffic-1) #Filter out network lines/edges below specified traffic
#Plot network
a<- ggplot()+ #Use ggplot base
#geom_polygon(data = shapefile, aes(x = long, y = lat, group = group), colour = "dark grey", fill = NA)+ #plot provided shapefile
geom_sf(data=shapefile, colour = "black", fill=NA, inherit.aes = FALSE)+
geom_segment(data=plot.data, aes(x=from.x, xend = to.x, y=from.y, yend = to.y, size=Freq), colour='burlywood4', alpha=0.6) +  #Plot movement lines
scale_size("line", range = c(line.min, line.max))+  #Set line-size range
geom_point(data=data$receiver.locations, aes(x=long, y=lat, fill=Freq), size=3, shape=21, stroke=1.3)+  #Add reciever circles, colour by matrix frequency
scale_fill_viridis_c()+
#coord_fixed(xlim=xlim, ylim=ylim)+  #Lock aspect ratio. Specify limits if shapefile is too big
ylab(y.axis)+ #y axis label
xlab(x.axis)+ # x axis label
ggtitle(as.character(plot.title))+ #add optional title
theme_classic() #simple plot theme
#If else loop to look for optional labels.
if(isFALSE(labels)){c <- NULL} else{ #Ignore the lines below if labels are not wanted
c<-geom_label(data=data$receiver.locations, #add labels for receiver names
aes(x=long, y=lat, label=(data$receiver.locations$ReceiverNames)), #add labels for receiver names
hjust = 0, size=label.size, alpha=label.transparency, nudge_x=label.nudge) #add labels for receiver names
} #end if else loop
###
print(a + c) #print plot with optional shapefile and labels
###
}
plot <- network_plot(data = network_test,
Min.traffic=3, #specify if you want ignore any lines below traffic threshold
shapefile=HH_shapefile_WGS84,  #specify shapefile, and potential domain limits
#colour.gradient.low="grey", colour.gradient.high="purple", #pick your own colour scale
line.min=1, line.max=3, #pick your own line weights
#receiver.shape=22, receiver.size=6, receiver.stroke=4, #customize the look of your nodes
plot.title="Network plot", #speficy optional figure title (useful if looping across fish)
#labels=TRUE, label.size=1.8, label.transparency=0.5, label.nudge=0.00009, #add labels, and specify details
)
plot+
scale_x_continuous(limits=c(min(network_test$plot.data$to.x)-0.1, min(network_test$plot.data$to.x)+0.2))+
scale_y_continuous(limits=c(min(network_test$plot.data$to.y)-0.01, max(network_test$plot.data$to.y)+0.01))
?geom_sf
#load package
devtools::load_all()
#working script
library(tidyverse)
library(data.table)
data_test <- data_det_raw %>%
mutate(FishID = as.numeric(as.factor(animal_id)),
ReceiverID=transmitter_id,
lat=deploy_lat,
long=deploy_long)
network_test <- network_summary(data = data_test,
FishID=data_test$FishID,
ReceiverID=data_test$ReceiverID,
lat = data_test$lat,
long = data_test$long)
network_test$receiver.locations
network_test$individual.moves
network_test$plot.data
plot <- network_plot(data = network_test,
Min.traffic=3, #specify if you want ignore any lines below traffic threshold
shapefile=HH_shapefile_WGS84,  #specify shapefile, and potential domain limits
#colour.gradient.low="grey", colour.gradient.high="purple", #pick your own colour scale
line.min=1, line.max=3, #pick your own line weights
#receiver.shape=22, receiver.size=6, receiver.stroke=4, #customize the look of your nodes
plot.title="Network plot", #speficy optional figure title (useful if looping across fish)
#labels=TRUE, label.size=1.8, label.transparency=0.5, label.nudge=0.00009, #add labels, and specify details
)
test_data <- data_det_raw %>%
mutate(FishID = as.numeric(as.factor(animal_id)),
ReceiverID=transmitter_id,
lat=deploy_lat,
long=deploy_long)
test_network_df <- network_summary(data = test_data,
FishID=test_data$FishID,
ReceiverID=test_data$ReceiverID,
lat = test_data$lat,
long = test_data$long)
test_network_df$receiver.locations
test_network_df$individual.moves
test_network_df$plot.data
test_plot <- network_plot(data = test_network_df,
Min.traffic=3, #specify if you want ignore any lines below traffic threshold
shapefile=HH_shapefile_WGS84,  #specify shapefile, and potential domain limits
#colour.gradient.low="grey", colour.gradient.high="purple", #pick your own colour scale
line.min=1, line.max=3, #pick your own line weights
#receiver.shape=22, receiver.size=6, receiver.stroke=4, #customize the look of your nodes
plot.title="Network plot", #speficy optional figure title (useful if looping across fish)
#labels=TRUE, label.size=1.8, label.transparency=0.5, label.nudge=0.00009, #add labels, and specify details
)
test_plot <- test_plot+
scale_x_continuous(limits=c(min(test_network_df$plot.data$to.x)-0.1, min(test_network_df$plot.data$to.x)+0.2))+
scale_y_continuous(limits=c(min(test_network_df$plot.data$to.y)-0.01, max(test_network_df$plot.data$to.y)+0.01))
test_plot
?@param
@param?
@param
?roxygen2
?igraph
library(igraph) #plotting package
?igraph
?geom_sf
#library(igraph) #plotting package
library(rgdal) #geospatial package
?geom_sf
#Bring in packages used in functions
library(ggplot2) #plotting package
?geom_sf
#load packages
library(roxygen2)
library(devtools)
#load package
devtools::load_all()
#working script
library(tidyverse)
library(data.table)
test_data <- data_det_raw %>%
mutate(FishID = as.numeric(as.factor(animal_id)),
ReceiverID=transmitter_id,
lat=deploy_lat,
long=deploy_long)
test_network_df <- network_summary(data = test_data,
FishID=test_data$FishID,
ReceiverID=test_data$ReceiverID,
lat = test_data$lat,
long = test_data$long)
test_network_df$receiver.locations
test_network_df$individual.moves
test_network_df$plot.data
test_plot <- network_plot(data = test_network_df,
Min.traffic=3, #specify if you want ignore any lines below traffic threshold
shapefile=HH_shapefile_WGS84,  #specify shapefile, and potential domain limits
#colour.gradient.low="grey", colour.gradient.high="purple", #pick your own colour scale
line.min=1, line.max=3, #pick your own line weights
#receiver.shape=22, receiver.size=6, receiver.stroke=4, #customize the look of your nodes
plot.title="Network plot", #speficy optional figure title (useful if looping across fish)
#labels=TRUE, label.size=1.8, label.transparency=0.5, label.nudge=0.00009, #add labels, and specify details
)
test_plot <- test_plot+
scale_x_continuous(limits=c(min(test_network_df$plot.data$to.x)-0.1, min(test_network_df$plot.data$to.x)+0.2))+
scale_y_continuous(limits=c(min(test_network_df$plot.data$to.y)-0.01, max(test_network_df$plot.data$to.y)+0.01))
test_plot
