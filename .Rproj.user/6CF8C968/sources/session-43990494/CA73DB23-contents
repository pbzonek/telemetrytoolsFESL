


#-------------------------------------------------------------#
### Function to add a console message when functions are run
#-------------------------------------------------------------#
#' @name func_msg
#' @description #A fct function
#' @param #This function takes no parameters.
#' @return #The return value, if any, from executing the function.
#' @import shiny
#' @importFrom shinyjs runjs
#'
#' @noRd

# display debugging messages in R (if local)
# and in the console log (if running in shiny)
func_msg <- function(...) {
  is_local <- Sys.getenv('SHINY_PORT') == ""
  in_shiny <- !is.null(shiny::getDefaultReactiveDomain())
  txt <- toString(list(...))
  if (is_local) message(txt)
  if (in_shiny) shinyjs::runjs(sprintf("console.debug(\"%s\")", txt))
}



#-------------------------------------------------------------#
### Function to get current module
#-------------------------------------------------------------#
#' @name fct_current_module
#' @description #A fct function
#' @param session #A shiny session object
#' @return #Nothing. Used for retrieving the value of the current module.
#' @import shiny
#'
#' @noRd

fct_current_module <- function(session) {
 current_module <- sub(
  "-$",
  "",
  session$ns("")
 )
}



#-------------------------------------------------------------#
### Function to Log values for all input inside the current module
#-------------------------------------------------------------#
#' From 2024-05-22 help session with ThinkR
#' https://github.com/promotionsante/exploratorium/blob/main/R/log_all_current_module_input.R
#'
#' @name fct_log_all_current_module_input
#' @description #A fct function
#' @param session #A shiny session object
#' @return #Nothing. Used for its side effect of printing
#' information into the console.
#' @import shiny
#' @importFrom cli cat_rule cli_alert
#'
#' @examples
#' mock_session <- shiny::MockShinySession$new()
#' mock_session$setInputs(x = 1, y = c("a", "b"))
#' shiny::reactiveConsole(TRUE)
#' log_all_current_module_input(
#'   session = mock_session
#' )
#' shiny::reactiveConsole(FALSE)
#'
#' @noRd

fct_log_all_current_module_input <- function(
    session = shiny::getDefaultReactiveDomain()){

  current_module <- fct_current_module(session)
  cat_rule(paste("SHINY 'input$' values from:", current_module))

  #Loop through each name
  for (name in names(session$input)){
    cli_alert(
        sprintf("%s: %s",
                name,
                paste(session$input[[name]], collapse = ", ")
                )
              )
    } #End loop

} #End function



#-------------------------------------------------------------#
### Function to print all object names in r_debug
#-------------------------------------------------------------#
#' @name fct_print_r_debug_object_names
#' @description Function to recursively print the names of objects in a nested list, up to a maximum depth of 1,
#' organized in categories based on the first level
#' @param obj,parent_name #Internal parameters for {shiny}
#' @return #Nothing. Used for its side effect of printing r_debug objects
#' as a list into the console
#' @import shiny
#'
#' @noRd

fct_print_r_debug_object_names <- function(obj, parent_name = "", depth = 1, max_depth = 2) {

 #Print label
 # If the current depth exceeds the maximum allowed depth, return without doing anything
 if (depth > max_depth) {
  return()
 }

# Special handling for top level (depth 1)
 if (depth == 1 && is.list(obj)) { # Iterate over each category in top-level list
  for (name in names(obj)) {
   cat(paste0("\nr_debug$", name), "\n") #Print category name w/ r_debug as prefix
   fct_print_r_debug_object_names(obj[[name]], name, depth + 1, max_depth) # Recursively call the function for the current category, increasing the depth by 1
  }
 } else if (is.list(obj)) {
  # Special handling in secondary levels
  for (name in names(obj)) { # For non-top-level lists, iterate over each element in the list
   full_name <- if (parent_name == "") name else paste("r_debug", parent_name, name, sep = "$")  # Construct the full name with the parent name and the current name
   cat("  ", full_name, "\n")
   fct_print_r_debug_object_names(obj[[name]], full_name, depth + 1, max_depth) # Recursively call the function for the current element, increasing the depth by 1
  }
 }
}



#-------------------------------------------------------------#
### Function to print all reactive values and wait for r_debug to be loaded
#-------------------------------------------------------------#
#' @name fct_browser_prep
#' @description #A fct function
#' @param r,session #Internal parameters for {shiny}
#' @return #Nothing. Used for its side effect of printing
#' reactives as a list into the console
#' @import shiny
#' @importFrom cli cat_rule
#' @importFrom shinybusy show_modal_spinner remove_modal_spinner
#' @noRd

fct_browser_prep <- function(session = shiny::getDefaultReactiveDomain(),
                             r, r_debug){

    #show loading screen
    show_modal_spinner(text = "Loading objects")

    # input$Input values
    fct_log_all_current_module_input() #Print out all reactives

    # # r values
    # cat_rule(paste("Reactive Values from r:"))
    # print(reactiveValuesToList(r))

    # r_debug values
    Sys.sleep(0.5) #Wait so logs can load
    fct_print_r_debug_object_names(r_debug) #Print out all r_debug objects

    # fct message
    current_module <- fct_current_module(session) #Identify module
    cat_rule(paste("Running browser from", current_module)) #Print module

    #hide loading screen
    remove_modal_spinner()
  }



