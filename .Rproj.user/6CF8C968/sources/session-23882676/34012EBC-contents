#' @name network_plot2
#' @description #Summarize an input datatable to produce a dafaframe for plotting
#' @param data The input list created by the network_summary function. The list must include a dataframe titles plot.data
#' @returns Asingle ggplot
#' @import ggplot2
#' @export
network_plot2 <- function(data, #specify previously created network matrix
                         Min.traffic=1, #specify if you want ignore any lines below traffic threshold
                         shapefile=NA, xlim=NULL, ylim=NULL, #specify shapefile, and potential domain limits
                         #colour.gradient.low="blue", colour.gradient.high="red", #pick your own colour scale
                         line.min=0.5, line.max=2.5, #pick your own line weights
                         #receiver.shape=21, receiver.size=4, receiver.stroke=2, #customize the look of your nodes
                         plot.title=NULL, y.axis="latitude", x.axis="longitude", #speficy optional figure title (useful if looping across fish)
                         labels=FALSE, label.size=2, label.transparency=0.6, label.nudge=0, #add labels, and specify details
                         ...){ #Start function

  plot.data<-subset(data$plot.data, data$plot.data$Freq>Min.traffic-1) #Filter out network lines/edges below specified traffic



  #Plot network
  a<- ggplot()+ #Use ggplot base
    #geom_polygon(data = shapefile, aes(x = long, y = lat, group = group), colour = "dark grey", fill = NA)+ #plot provided shapefile
    geom_sf(data=shapefile, colour = "black", fill=NA, inherit.aes = FALSE)+
    geom_segment(data=plot.data, aes(x=from.x, xend = to.x, y=from.y, yend = to.y, size=Freq), colour='burlywood4', alpha=0.6) +  #Plot movement lines
    scale_size("line", range = c(line.min, line.max))+  #Set line-size range
    geom_point(data=data$receiver.locations, aes(x=long, y=lat, fill=Freq), size=3, shape=21, stroke=1.3)+  #Add reciever circles, colour by matrix frequency
    scale_fill_viridis_c()+
    #coord_fixed(xlim=xlim, ylim=ylim)+  #Lock aspect ratio. Specify limits if shapefile is too big
    ylab(y.axis)+ #y axis label
    xlab(x.axis)+ # x axis label
    ggtitle(as.character(plot.title))+ #add optional title
    theme_classic() #simple plot theme


  #If else loop to look for optional labels.
  if(isFALSE(labels)){c <- NULL} else{ #Ignore the lines below if labels are not wanted
    c<-geom_label(data=data$receiver.locations, #add labels for receiver names
          aes(x=long, y=lat, label=(data$receiver.locations$ReceiverNames)), #add labels for receiver names
          hjust = 0, size=label.size, alpha=label.transparency, nudge_x=label.nudge) #add labels for receiver names
    } #end if else loop
  ###
  print(a + c) #print plot with optional shapefile and labels
  ###
} #end function
